@{
    ViewData["Title"] = "Docs";
}

<div class="container">
    <h3 class="text-primary mb-4 mt-4 text-center">Documentation</h3>
    <br />

    <h4>External links</h4>
    <ul class="list-unstyled">
        <li>
            Github:
            <a href="https://github.com/SaraKoutbia/rover-tracking" target="_blank">
                rover-tracking
            </a>
        </li>
        <li>
            Demo video:
            <a href="https://www.screencast.com/t/xPd0g68Dof" target="_blank">
                User interaction and design
            </a>
        </li>
    </ul>
    <h4>Objective and scope</h4>
    <p>
        Determine the rovers final position on the plateau based on their initial position and trajectory.
        The plateau's boundaries are also considered in the calculations because the rovers are constrained to stay inside the plateau.
    </p>
    <h4>Assumptions</h4>
    <ul>
        <li>
            Only one request can be made  at a time. In other words, each request specifies a single  plateau and the rover's initial positions that belong to it.
        </li>
        <li>
            The rovers must remain inside the plateau and any instructions requesting the rovers  to move beyond the plateau's boundaries will be ignored.
        </li>
        <li>	The lower-left coordinates are assumed to be (0,0)</li>
    </ul>
    <h4>User interaction and design</h4>
    <p>
        The default page displays a textbox where the user is expected to insert a formatted input string (see 1, figure A).
        Details about the expected format are provided on the side  (see 2, figure A).
        The user input undergoes validation first, either validation passes and the final positions of the rovers are computed (see 3, figure A),
        or validation fails, in which case, a validation error message is displayed, to inform the user why their input is rejected.
        The breakdown of the rover's trajectory can be viewed by clicking the "details" anchor (see 4, figure A).
    </p>
    <div class="col-md-6 m-3">
        <figure class="figure">
            <img src="~/Resources/Image/UserInterfaceDescription.png" class="img-fluid" alt="Responsive image">
            <figcaption class="figure-caption text-right">Figure A: user interface description</figcaption>
        </figure>
    </div>
    <p>
        The user interface also includes a documentation page and a demo page which demonstrates the application's
        response to the different scenarios.
    </p>

    <h4>Software architecture</h4>
    The solution includes two projects
    <ul>
        <li>An ASP.NET MVC project: RoverTrackingMVC</li>
        <li>A test project: RoverTrackingTests</li>
    </ul>
    <div class="col-md-6 m-3">
        <figure class="figure">
            <img src="~/Resources/Image/RoverTrackingMvc.jpeg" class="img-fluid" alt="Responsive image">
            <figcaption class="figure-caption text-right">Figure B: RoverTrackingMVC architecture </figcaption>
        </figure>
    </div>

    <h4>User input validations</h4>

    <ul>
        <li>
            The user input cannot be null or empty.
        </li>
        <li>
            The first line must contain two integers, separated by a space,
            representing the upper-right coordinates of the plateau.
        </li>
        <li>
            The rover's initial state must contain two integers and a character, separated by a space,
            representing the rover's initial coordinates and its orientation.
        </li>

        <li>
            The rovers must be positioned initially within the plateau.
        </li>
        <li>
            The rover's trajectory can only take the following values 'M', 'L', 'R'.
        </li>
    </ul>




    <a asp-area="" asp-controller="RoverTracking" asp-action="FinalPlateauState">Try out the application!</a>
</div>
